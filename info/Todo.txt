
	WTB-Todo
	--------
		
	Prio 1
	
		- *.tar.gz Paket fuer Testfiles erstellen (core-Templates etc.)
		  und als EXTRA Download auf CPAN hochladen (Versionsnummer
		  anfuegen wg. Kompatibilitaet zum Modul!) -> hochladen
	
		- Macroparser muss HTML-Kommentare verstehen
		
		- alle internen '_'-Funktionen im WebToolkit.pm in
		  '__' umbennen, da sonst ggf. Konflikt mit AUTOLOAD-Fkt...
		
		- Templates/Generatoren fuer best. Zwecke:
		  - "flashfile"
		  - "image"
		  - "audiofile"
		  - "modallink": Link, der in einem Modaldialog oeffnet
		  - "jsvalidate": bezieht sich auf ein best. Formularelement
		    und zeigt kleine Nachricht an, wenn Elementinhalt
			nicht best. Vorgabe entspricht (JS-Feldtypen-Bezeichner
			wie z.B. "date", "email" etc.)


	Prio 2
	
		- auf CPAN veroeffentlichen, ggf. umbenennen

		- Hardcore-Testlauf durchfuehren: Versuchen, das Programm
		  zum Fehlerwerfen zu bringen, -> dann so viele Fehler wie
		  moeglich beheben oder aussagekraeftige Fehlermeldungen ausgeben
		  - Logging
		  - Cache-Configs
		  - Localization


	--------------------------------------------------------------------
	Drafts
	
		- DB-Tabellen automatisch erstellen/anpassen:
		  -> Konfiguration: -schemaname => <schemaname>
		  -> Definition: schemas/<schemaname>.txt
		  -> Syntax (zeilenbasiert):
			   '['<tablename>']'
			   <fieldname>[<addon>]':' <fielddefinition>
		  -> Addons:
			 - "deprecated": wird nicht angelegt, aber auch nicht geloescht
			 - "formerly <fieldname>": wird vor allen Feldern names <fieldname> bevorzugt
		  -> Bsp:
			 ----------------------------------------------------
			 # Kommentar
			 [session]
			 id: int(16) auto_increment primary key
			 last_update: int(16)
			 content deprecated: text
			 new_content formerly content: text
			 ----------------------------------------------------
		  -> Workflow-Fkt. "core.admin.setup_db" liest Schema ein, legt
			 DB an und legt/passt Tabellen an
		  -> Workflow-Fkt. "core.admin.check_db" liest Schema ein und
			 stellt Inkonsistenzen dar
	      => NICHT JEDER SOLL DIESE FKT AUFRUFEN DUERFEN!


		- Modul "validate": Fkt. zur Validierung best. Daten
		  (Datumsangaben, Email, Passwort, Benutztername etc.)


		- Modul "search": Indizierung und Suche ueber best. DB-Felder

		
		- Modul "menu": autom. Generierung von Menues auf Basis von
		  DB-Seiten-Eintraegen


		- Formulare direkt aus DB-Modell generieren, z.B.
		  --------------------------------------------------------
		  my $html =
			form::create(
				'profile.first_name' => ['form.text','First Name','Tom',''],
				'profile.name' => [...],
				...
			);
		  --------------------------------------------------------
		  -> werden immer an Workflow-Fkt. "core.edit" geschickt
		  -> optional werden einzelne Formelemente auch per Ajax
		     editierbar gemacht
		  -> werden optional auch validiert und bei Fehler wird
		     Workflow-Fkt. "core.edit.error" aufgerufen
		  -> bei Erfolg wird Workflow-Fkt. "core.edit.success" aufgerufen
		  => SEHR SCHWER MAECHTIG UND FLEXIBEL ZUGLEICH HANDHABBAR!

